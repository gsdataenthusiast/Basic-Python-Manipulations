# -*- coding: utf-8 -*-
"""Basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MGOgAikn8HhZwSSc8otHH3F8efLzw0Lo

##   Question 2 : 1.4.5.1 Array Manipulations

1.Form the 2-D array (without typing it in explicitly):
[[1,  6, 11],
 [2,  7, 12],
 [3,  8, 13],
 [4,  9, 14],
[5, 10, 15]]
"""

import numpy as np
a=np.arange(1,16).reshape(3,5)
a=np.stack((a), axis=-1)
a

"""and generate a new array containing its 2nd and 4th rows.

"""

b =(a[[1, 3], :])
b

"""2.Divide each column of the array:

import numpy as np
a = np.arange(25).reshape(5, 5)
elementwise with the array b = np.array([1., 5, 10, 15, 20]). (Hint: np.newaxis)
"""

a = np.arange(25).reshape(5, 5)
a

b = np.array([1., 5, 10, 15, 20])
b

c = a/b[np.newaxis, :]
c

"""3.Harder one: Generate a 10 x 3 array of random numbers (in range [0,1]). For each row, pick the number closest to 0.5.

Use abs and argsort to find the column j closest for each row.
Use fancy indexing to extract the numbers. (Hint: a[i,j] â€“ the array i must contain the row numbers corresponding to stuff in j.)
"""

d = np.random.rand(10,3)
d

"""###  Question 3  1.4.5.2. Picture manipulation: Framing a Face

i) Ellipsoid mask
"""

from scipy import misc
face = misc.face(gray=True)
import matplotlib.pyplot as plt
face = misc.face(gray=True)
plt.imshow(face)

plt.imshow(face, cmap=plt.cm.gray)

sy, sx = face.shape
y, x = np.ogrid[0:sy, 0:sx] # x and y indices of pixels
y.shape, x.shape

h, k = (660, 300) ##from the centre
mask = (((x-h)**2)/40000 + ((y-k)**2)/10000) >=1 ##ellipse equation with a=200, b=100
face[mask] = 0
plt.imshow(face, cmap=plt.cm.gray)

"""### **1.4.5.3. Data statistics**"""

!wget http://www.scipy-lectures.org/_downloads/populations.txt
data = np.loadtxt('populations.txt')
year, hares, lynxes, carrots = data.T  # trick: columns to variables

import matplotlib.pyplot as plt
plt.axes([0.2, 0.1, 0.5, 0.8]) 

plt.plot(year, hares, year, lynxes, year, carrots) 

plt.legend(('Hare', 'Lynx', 'Carrot'), loc=(1.05, 0.5))

"""a. The median and 75th percentile of the populations of each species for the years in the period."""

data

print ("Median of Hares:", np.median(hares))
print ("Median of Lynx:", np.median(lynxes))
print ("Median of Carrots:", np.median(carrots))

print ("75th percentile for Hares:", np.percentile(hares,75, axis=0))
print ("75th percentile for Lynx:", np.percentile(lynxes,75, axis=0))
print ("75th percentile for Carrots:", np.percentile(carrots,75, axis=0))

"""b. The histogram of hare population with bins [0, 25000, 50000, 75000, 100000]

"""

plt.hist2d(year,hares, bins=5, cmap='Blues')
plt.yticks([0, 25000, 50000, 75000, 100000])
plt.xlabel('years')
plt.ylabel('hare population')
cb = plt.colorbar()
cb.set_label('counts in bin')

"""c.Which years did the population of each species drop the most from the previous year? """

data1 = data[:,1:] 
e= np.diff(data1, axis=0)
e

print("Population drop years for hares, lynxes, carrots are", year[np.argmax(np.abs(e), axis=0) + 1])

"""## Question 4 Scikit Learn

a. Choose some numerical feature that you feel might be related to a diagnosis of malignant (vs benign)
"""

import scipy as sc
import pandas as pd
import seaborn as sns
from sklearn.datasets import load_breast_cancer
BC = load_breast_cancer()
df = pd.DataFrame(data=BC.data, columns=BC.feature_names)
df.head(5)

df['Target'] = data.target
df['Target_names'] = data.target
df.loc[(df.Target_names == 0),'Target_names']='malignant'
df.loc[(df.Target_names == 1),'Target_names']='benign'
sns.heatmap(df.corr())

"""I would choose 'mean radius' and 'mean smoothness' due to their higher correlation with target and also theoretically  size and smoothness plays a major role too. """

df.plot(x='mean radius', y='mean smoothness', style=['o','rx'])

from sklearn.linear_model import LinearRegression
A= df['mean radius'].to_numpy().reshape(-1, 1)
B= df['Target'].to_numpy().reshape(-1, 1)
lreg = LinearRegression()
lreg.fit(A, B)
pred = lreg.predict(A)
plt.scatter(A, B)
plt.plot(A, pred, color='red')
plt.show()